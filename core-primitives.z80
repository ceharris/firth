; ; words must preserve: BC, DE, SP, IX
; ; words may destroy: HL, IY, AF, AF', BC', DE' HL'

defword "xword",6,0,xword               ; delim limit addr -- c-addr
    call xwordSkip
    call xwordRead
    NEXT

defword "find",4,0,FIND
    ppop0 H,L

    call lookup                     ; params: HL = string address, BC = string length
                                    ; returns: DE = found header ptr or 0
    loadWord B,C, D,E               ; move to TOS
    NEXT

defword "execute",7,0,EXECUTE
    ppop H,L                        ; POP TOS into HL
    jp (hl)                         ; go do Forth word

defword "number",6,0,NUMBER         ; ( ptr len -- num err )
    ppop0 H,L
	call toNumber                   ; params: HL = string address, BC = string length
			                        ; Returns the parsed number in DE,
	                                ; BC = 0, success
    ppush0 D,E
    NEXT

defword "+!",2,0,ADDSTORE               ; (n addr -- )
	ppop H, L		            ; HL = address, TOS = amount to add
	ld A,(HL)
	add A,C                         ; add TOS at (HL),
	ld (HL),A
	inc HL
	ld A,(HL)
	adc A,B
	ld (HL),A
	ppop0 B,C                      ; clear param stack
    NEXT

defword "hidden",6,0,HIDDEN
    ppop H,L		            ; HL = Dictionary entry.
    inc HL
    inc HL                      ; Point to name/flags byte.

    ld A, (HL)
    xor MSK_HIDDEN        	    ; Toggle the HIDDEN bit.
    ld (HL), A
    NEXT

; 1+      n1/u1 -- n2/u2            add 1 to TOS
defword "1+",2,0,onePlus
    inc BC
    NEXT

; 2+      n1/u1 -- n2/u2            add 2 to TOS
defword "2+",2,0,twoPlus
    inc BC
    inc BC
    NEXT

; ?branch   x --              branch if TOS zero
defword "0branch",7,0,ZBRANCH
    checkZeroWord B,C               ; test old TOS
    ppop0 B,C                       ; POP new TOS
    jr z,BRANCH                     ; if old TOS=0, branch
    pop HL
    inc HL                          ; else skip inline value
    inc HL
    NEXT1

defword "branch",6,0,BRANCH         ; relative branching
    pop HL                          ; add the offset to the instruction pointer
    ld E,(HL)
    inc HL
    ld D,(HL)
    dec HL
    add HL,DE
    NEXT1

defword "lit",3,0,LIT
	ppush0 B,C                      ; pushTOS
	pop HL                          ; pop address of next Forth word in HL
	readWord HL, B,C                ; read next word and push on TOS, inc HL by 2
    NEXT1

; 0<     n -- flag                  true if TOS negative
defword "0<",2,0,ZEROLESS
    sla b                           ; sign bit -> cy flag
    sbc a,a         
    and 1                           ; <0 = -1, >0 = 0
    ld b,0
    ld c,a
    NEXT

; INVERT x1 -- x2               ; bitwise complement
defword "invert",6,0,INVERT
    ld A,B
    cpl
    ld B,A
    ld A,C
    cpl
    ld C,A
    NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; logic
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; TRUE
defword "true",4,0,TRUE
    ppush0 B,C
    ld BC,1
    NEXT

; FALSE
defword "false",5,0,FALSE
    ppush0 B,C
    ld BC,0
    NEXT

; =      x1 x2 -- flag         test x1=x2
defword "=",1,0,equal
    ppop0 H,L
    or A
    sbc HL,BC       ; x1-x2 in HL, SZVC valid
    _if nz
        ld BC, 1       ;   if -ve, result true
    _endif
    inc BC
    NEXT

; <      n1 n2 -- flag          test n1<n2
defword "<",1,0,LESSTHAN	        ; less than
    ppop0 H,L
    or A
    sbc HL,BC       ; n1-n2 in HL, SZVC valid
    _if pe
        _if m
            ld bc, 0
        _else
            ld bc, 1       ;   if -ve, result true
        _endif
    _else
        _if p
            ld bc, 0
        _else
            ld bc, 1       ;   if -ve, result true
        _endif
    _endif
    NEXT

; >      n1 n2 -- flag          test n1 > n2
defword ">",1,0,GREATERTHAN	        ; less than
    ppop0 H,L                  ; swap operands
    ppush H,L
    jr LESSTHAN

; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ;;
; ;; memory access
; ;;
; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; !        x a-addr --   store cell in memory
defword "!",1,0,STORE
    ppop H,L
    writeWord HL, B,C
    ppop0 B,C          ; POP new TOS
    NEXT

defword ",",1,0,COMMA
	ld HL, (VAR_HERE)	; HERE
	writeWord HL, B,C
	ld (VAR_HERE), HL	; Update HERE (incremented)
	ppop0 B,C		        ; cleanup TOS
    NEXT

defword "@",1,0,FETCH
    loadWord H,L, B,C ; HL = TOS
    readWord HL, B,C
    NEXT

; CELLS   ( n1 -- n2 ) n2 is the size in address units of n1 cells.
defword "cells",5,0,CELLS
    jp twostar

; C!      char c-addr --    store char in memory
defword "c!",2,0,CSTORE
    ppop H,L
    ld (HL),C
    ppop0 B,C          ; POP new TOS
    NEXT

defword "c,",1,0,CCOMMA
    ppush0 H,L
	ld HL, (VAR_HERE)	; HERE
	ld (HL), C          ; Store DE at memory pointed to by VAR_HERE
	inc HL
	ld (VAR_HERE), HL	; Update HERE (incremented)
    ppop0 H,L
	ppop0 B,C		        ; cleanup TOS
    NEXT

; C@     c-addr -- char   fetch char from memory
defword "c@",2,0,CFETCH
    ld A,(BC)
    ld C,A
    ld B,0
    NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; arithmetic
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; +       n1/u1 n2/u2 -- n3/u3     add n1+n2
defword "+",1,0,PLUS
    ppop0 H,L
    add HL,BC
    loadWord B,C, H,L
    NEXT

; 2*      n1/u1 -- n2/u2            arithmetic left shift
defword "2*",2,0,TWOSTAR
    sla C
    rl B
    NEXT

defword "-",1,0,MINUS
    ppop0 H,L
    or A
    sbc HL,BC
    loadWord B,C, H,L
    NEXT

; U*   u1 u2 -- ud   unsigned mutliply
defword "u*",2,0,USTAR              ; u1 u2 -- ud
                                    ; u2 in BC
    ppop0 D,E                       ; u1 in DE
	call unsignedMultiply
    ppush0 D,E                      ; udlo result
                                    ; udhi result
    NEXT

; U/MOD   u1 u2 -- u1 u2    unsigned 16 / 16 -> r q
defword "u/mod",5,0,USLASHMOD
    ppop D,E                ; DE = divisor
                            ; BC = dividend
    call divideWordByWord

    ppush0 H,L           ; PUSH remainder,
    NEXT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; logic
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "[",1,MSK_IMMED,LBRAC
	ld HL, 0
	ld (VAR_STATE), HL	; Set STATE to 0.
    NEXT

defword "]",1,0,RBRAC
	ld HL, 1
	ld (VAR_STATE), HL	; Set STATE to 1.
    NEXT

; 0= zero-equal
defword "0=",2,0,zEqual
    checkZeroWord B,C            ; returns 0 if not equal, 1 if equal
    _if nz
        ld BC, -1
    _endif
    inc BC
    NEXT

defword "0<>",3,0,zNotEqual
    checkZeroWord B,C            ; returns 0 if not equal, 1 if equal
    _if nz
        ld BC, 1
    _endif
    NEXT

; and    x1 x2 -- x3            logical and
defword "and",3,0,and	        ; bitwise and
    ppop0 H,L
    ld A,b
    and H
    ld B,A
    ld A,C
    and L
    ld C,A
    NEXT

; OR    x1 x2 -- x3             logical OR
defword "or",2,0,OR	            ; bitwise OR
    ppop0 H,L
    ld A,B
    or H
    ld B,A
    ld A,C
    or L
    ld C,A
    NEXT
    
; xor    x1 x2 -- x3            logical xor
defword "xor",3,0,xor	        ; bitwise xor
    ppop0 H,L
    ld A,B
    xor H
    ld B,A
    ld A,C
    xor L
    ld C,A
    NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; stack
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword "rot",3,0,ROT       ; x1 x2 x3 -- x2 x3 x1
                            ; x3 in BC
    ppop0 D,E               ; x2 in DE
    ppop0 H,L               ; x1 in HL
    ppush0 D,E              ; x2 on stack
    ppush H,L               ; PUSH x1 - x2 x3 x1
                            ; x1 in BC
    NEXT

defword "-rot",4,0,NROT     ; x1 x2 x3 -- x3 x1 x2
                            ; x3 in BC
    ppop0 D,E               ; x2 in DE
    ppop0 H,L               ; x1 in HL
    ppush H,L               ; PUSH x1 - x3 x1
    ppush D,E               ; PUSH x2 - x3 x1 x2
                            ; x2 in BC
    NEXT

defword "dup",3,0,DUP        ; x -- x x
    ppush0 B,C
    NEXT

; SWAP     x1 x2 -- x2 x1    swap top two items
defword "swap",4,0,SWAP      ; x1 x2 -- x2 x1
    ppop0 D,E
    ppush D,E
    NEXT

defword "drop",4,0,DROP      ; x --
    ppop0 B,C		    ; drop top of stack
    NEXT

; OVER    x1 x2 -- x1 x2 x1
defword "over",4,0,OVER
    ppop0 H,L
    ppush0 H,L
    ppush H,L
    NEXT

; >R    ( x -- ) ( R: -- x )  Move  x from TOS to the return stack.
defword ">r",2,0,TOR
    pop HL
    push BC
    push HL
    ppop0 B,C
    NEXT

; R>    ( -- x ) ( R: x -- )  Move x from the return stack to TOS
defword "r>",2,0,RFROM
    ppush0 B,C
    pop HL
    pop BC
    push HL
    NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; output
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

defword ".",1,0,DOT                 ; print top of stack in BASE
    push HL
    push DE
    push BC
    loadWord H,L, B,C
    ld A,(VAR_BASE)
    ld C,A
    ld DE, wordBuf
    call formatNum
    call printStr
    call printSpace
    pop BC
    pop DE
    pop HL
    ppop0 B,C
    NEXT

defword "type",4,0,TYPE             ; ( str len -- )
    ppop0 D,E                       ; DE = str BC = length
    call printStr
    ppop0 B,C                       ; clear TOS
    NEXT

defword "cr",2,0,cr                 ; ( -- )
    call printcr
    NEXT

    
    ; dw dup, 0<                      ; ptr data data 
    ; cIf                             
    ;     dw swap                     ; data ptr 
    ;     dw dup, lit, '-'            ; data ptr ptr '-'
    ;     dw swap, store              ; data ptr
    ; cEndif
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HL = data, DE = ptr to lineBuf, C = base ***
; DE = ptr to string, BC = length
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; formatNumber:                       ; base data ptr -- ptr length
    ; bit 7, H
    ; _if nz
    ;     ; HL is negative. Output '-' to string and negate HL.
    ;     ld A, '-'
    ;     ld (DE), A
    ;     inc DE
    ;     call negateNum
    ; _endif

    ; ld B, 0     ; B will count character length of number
    ; _do
    ;     push BC
    ;     call divideWordByByte  ; HL = HL / A, A = remainder
    ;     pop BC
    ;     push AF
    ;     inc B
    ;     checkZeroWord H,L
    ; _until z
    ; _enddo
    ; _do
    ;     pop AF
    ;     add A,$30                     ; convert digit to ASCII
    ;     cp $3A
    ;     _if nc
    ;         add A,7
    ;     _endif
    ;     ld (DE), A
    ;     inc DE
    ; _djnz

    ; ld HL,wordBuf           ;calc length
    ; ex DE,HL
    ; or A
    ; sbc HL,DE
    ; loadWord B,C, H,L
    ; ret


