; utilities
; low-level machine code routines

TXT_INTRO:      .pstr "Firth - a Z80 Forth by John Hardy\r\n\r\n"
TXT_STACK_UNDERFLOW:
                .pstr "Error: Stack underflow\r\n"
DONE:           .pstr "\r\nDone! \r\n"
FAILED:         .pstr "Failed: \r\n"

nestingErr:     .pstr "Error: Definitions cannot be nested"

initForth:
    ld IX, data_stack                       ; initialise the param stack.
    ld IY, enter
    ld (var_sp0), IX
    ld BC, 0                                ; tos

    ld HL,0
    ld (var_framePtr), HL
    ld (var_intp_stop), HL
    ld (is_literal), HL
    ld (var_nesting), HL
    ld (var_state), HL

    ld HL, 10
    ld (var_base), HL

    ld HL, start_user
    ld (var_here), HL

    ld HL, header_latest
    ld (var_latest), HL
    ld (var_latest_str), HL

    ld A,rts_low
    out ($80),A                             ; initialise acia
    im 1
    ei
    ret

enter:
    pop HL
enter1:
    ld E,(HL)
    inc HL
    ld D,(HL)
    inc HL
    push HL
    ex DE,HL
    jp (HL)

forth:                                      ; for calling forth words from assembly
    ld HL, exitAddr
    ex (SP),HL
    ld (exitAddr),HL
    ex DE,HL
    jp (HL)

printNum:
    push HL
    push DE
    push BC
    loadWord H,L, B,C
    ld A,(VAR_BASE)
    ld C,A
    ld DE, wordBuf
    call formatNum
    call printStr
    call printSpace
    pop BC
    pop DE
    pop HL
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HL = data, DE = ptr to lineBuf, C = base ***
; DE = ptr to string, BC = length
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

formatNum:
    ; Detect sign of HL.
    bit 7, H
    _if nz
        ; HL is negative. Output '-' to string and negate HL.
        ld A, '-'
        ld (DE), A
        inc DE
        call negateNum
    _endif

    ld B, 0     ; B will count character length of number
    _do
        push BC
        call divideWordByByte  ; HL = HL / A, A = remainder
        pop BC
        push AF
        inc B
        checkZeroWord H,L
    _until z
    _enddo
    _do
        pop AF
        add A,$30                     ; convert digit to ASCII
        cp $3A
        _if nc
            add A,7
        _endif
        ld (DE), A
        inc DE
    _djnz

    ld HL,wordBuf           ;calc length
    ex DE,HL
    or A
    sbc HL,DE
    loadWord B,C, H,L
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; negate ***
; params: HL = number
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

negateNum:
    ; Negate HL (using two's complement)
    xor A
    sub L
    ld L, A
    ld A, 0     ; Note that xor A or SUB A would disturb CF
    sbc A, H
    ld H, A
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; divide word by byte ***
; params: HL = dividend, C = divisor
; returns: HL = result, A = remainder
; destroys: ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

divideWordByByte:
    ld B, 16
    xor A
    _do
        add HL, HL
        rla
        _if c
            sub C
            inc L
        _else
            cp C
            _if nc
                sub C
                inc L
            _endif
        _endif
    _djnz
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Divide word by word ***
; params: BC = dividend, DE = divisor
; returns: BC = result, HL = remainder
; destroys: ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

divideWordByWord:
    push DE
    ld HL,0
    ld A,B
    ld B,8
    _do
        rla
        adc HL,HL
        sbc HL,DE
        _if c
            add HL,DE
        _endif
    _djnz
    rla
    cpl
    ld B,A
    ld A,C
    ld C,B
    ld B,8
    _do
        rla
        adc HL,HL
        sbc HL,DE
        _if c
            add HL,DE
        _endif
    _djnz
    rla
    cpl
    ld B,C
    ld C,A
    pop DE
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; toNumber -  converts string to number in the ***
; base strored in VAR_BASE
;
; params: HL = string address, BC = string length
; returns: DE = parsed number, BC = 0: success, not 0, uparsed chars
; destroys: AF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

toNumber:
    push IY             ; save regs
    push HL

    push HL             ; IY = HL
    pop IY

    ld DE, 0            ; 16 bit accum
    ld HL, 0            ; 8 bit char
    checkZeroWord B,C        ; if BC == 0 exit de = 0, BC = 0 (no error)
    _if z              ; trying to parse a zero-length string is an error, But will return 0.
        pop HL
        pop IY
        ret                 ; de = number, BC = err
    _endif
                            ; Check if first character is '-'.
    ld A, (IY)            ; l = first character in string
    inc IY
    push DE                ; push 0 on stack
    cp '-'                ; negative number?
    _if z
        pop DE
        ld HL, 1
        push HL                ; push <> 0 on stack, indicating negative
        dec BC
        checkZeroWord B,C
        _if z
            pop HL                ; error: string is only '-'.
            ld BC, 1
            pop HL
            pop IY
            ret                 ; de = number, BC = err
        _endif
        ; Loop reading digits.
        push BC
        ld BC, (VAR_BASE)    ; get BASE (in %dl)
        call unsignedMultiply             ; de *= BASE, HL is destroyed
        pop BC

        ld A, (IY)            ; a = next character in string
        inc IY
    _endif
                        ; Convert 0-9, A-z to a number 0-35.
    _do
        sub '0'                ; < '0'?
        jr c, toNumberExit     ; invalid char, end of number
        cp 10                ; <= '9'?
        _if nc
            sub 17                ; < 'A'? (17 is 'A'-'0')
    _until c            ; BUG: nested until !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            add a, 10
        _endif

        ld HL, (VAR_BASE)       ; get BASE (in %dl)
        cp L                    ; >= BASE? then invalid char, end of number
    _until nc
        add A, E
        ld E, A
        ld A, 0
        adc a, d
        ld D, A
        dec BC              ; dec char count
        checkZeroWord B,C
    _until z
        push BC
        ld BC, (VAR_BASE)    ; get BASE (in %dl)
        call unsignedMultiply             ; de *= BASE, HL is destroyed
        pop BC

        ld A, (IY)            ; a = next character in string
        inc IY
    _enddo


toNumberExit:
    pop HL
    checkZeroWord H,L
    _if nz              ; if not -ve then skip
        ex DE,HL        ; negate de
        call negateNum
        ex DE,HL
    _endif
    pop HL
    pop IY
    ret                 ; de = number, BC = err

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; unsignedMultiply -  unsigned multiply ***
;
; params:  u1 in BC, u2 in DE
; returns: result in HLDE
; destroys: AF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

unsignedMultiply:
    ld HL,0
    ld A,17     ; loop counter
    or A        ; clear carry
    _do
        rr H
        rr L
        rr D
        rr E
        _if c
            add HL,BC
        _endif
        dec A
    _until z
    _enddo
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; compareStr - string equal
; params: de = string1, HL = string2, BC = length
; returns: a = -1, 0, 1, HL = mismatch char if a != 0
; destroys: de, HL, BC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

compareStr:

    checkZeroWord B,C    ; test for Count=0
    _if nz          ; length zero = match
        _do
            ld A,(DE)
            inc DE
            cpi
            _if nz          ; char mismatch: exit
                dec HL      ; point at mismatch char
                cp (HL)     ; set carry if char1 < char2
                sbc A,A
                or 1        ; a = ff if carry, 1 if no carry
                ret
            _endif
        _until po
        _enddo
    _endif
    ; count exhausted & no mismatch found
    ld A,0          ; a=0 (s1=s2)
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; lookup - lookup header in dictionary ***
;
; params: HL = string address, BC = string length
; returns: DE = found header ptr or 0
; destroys: AF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

lookup:
    ld DE, (VAR_LATEST)             ; search dictionary backwards from LATEST
    _do
        checkZeroWord D,E            ; NULL pointer?  (end of the linked list)
        ret z

        ; Compare the length expected and the length of the word.
        ; Note that if the MSK_HIDDEN flag is set on the word, then by a bit of trickery
        ; this won't pick the word (the length will appear to be wrong).

        push DE                     ; save ptr to header

        inc DE                      ; skip over first field
        inc DE
        ld A, (DE)                    ; a = flags+length field
        and MSK_HIDDEN | MSK_LENGTH    ; %al = name length

        cp C                        ; Length is the same?
        _if z
                                    ; Compare the strings in detail.
            inc DE                  ; DE = Dictionary string we are checking against.

            push HL                 ; save HL, BC
            push BC
            call compareStr           ; Compare the strings. BC = len
            pop BC
            pop HL

            or A                    ; if A == 0 then matched
            _if z
                pop DE                  ; matched, restore DE and return
                ret
            _endif

        _endif
        pop DE                  ; restore DE
        ld A,(DE)
        ex AF,AF'
        inc DE
        ld A,(DE)
        ld D,A
        ex AF,AF'
        ld E,A
    _enddo

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; listWords - prints all the words in dictionary
;
; destroys: ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

listWords:
    ld DE, (VAR_LATEST)             ; search dictionary backwards from LATEST
    _do
        checkZeroWord D,E                ; NULL pointer?  (end of the linked list)
    _until z
        push DE                     ; save ptr to header
        inc DE                      ; skip over first field
        inc DE
        ld A, (DE)                  ; a = flags+length field
        and MSK_HIDDEN | MSK_LENGTH ; %al = name length
        ld B,0
        ld C,A
        inc DE
        call printStr
        call printSpace
        call putc
        pop HL                      ; HL = link to previous header
        ld E,(HL)
        inc HL
        ld D,(HL)                   ; DE = previous word
    _enddo
    call printCR
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; utility routines used by xword
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

xwordSkip:                              ; delim addr -- delim addr char
    ppop H,L
    ppop D,E
    ppush0 B,C
    ppush0 D,E
    ppush0 H,L
    _do
        call getKey                     ; get next key, returned in A

        _switch

            bit 7, A                    ; check end of input
            _if nz
                ld (HL),0
                ld A,0
                _break
            _endif

            cp $5C                      ; \ start of a comment?
            _case z                     ; if yes skip to end of line
                _do
                    call getKey
                    cp "\r"             ; end of line yet?
                    _if nz
                        cp "\n"         ; end of line yet?
                    _endif
                _until z
                _enddo
            _endcase

            cp C                        ; = space?
            _case z
            _endcase

            cp " "                      ; < space?
            _case c
            _endcase

            ; default case
            _break

        _endswitch
    _enddo
    ld B,0
    ld C,A
    ret

xwordRead:                              ; delim addr char -- c-addr
    ld A,C
    ppop0 B,C
    ppop H,L
    ppop D,E
    ld D,0
    or A
    _if nz
        push HL                         ; save a copy of HL
        inc HL                          ; move to leave space for length byte
        ld B,E
        _do
            ld (HL), A                  ; add character to return lineBuf
            inc HL
            inc D
            call getKey                 ; get next key
            cp C                        ; = delim?
        _until z
            cp " "                      ; < space? i.e. control chars
        _until c
        _djnz
        pop HL                          ; restore HL
    _endif
    ld (HL),D                           ; write length
    loadWord B,C, H,L                   ; TOS = str ptr
    ret

