;   0<          ( n -- t )
;               Return true if n is negative.
CODE '0<',2,0,ZLESS
	SLA B	; sign bit -> cy flag
	SBC	A,A	; propagate cy through A
	LD	B,A	; put 0000 or FFFF in TOS
	LD	C,A
	NEXT

; and    x1 x2 -- x3            logical and
CODE "and",3,0,ANDD	        ; bitwise and
    PPOP0 H,L
    LD A,B
    AND H
    LD B,A
    LD A,C
    AND L
    LD C,A
    NEXT

; OR    x1 x2 -- x3             logical OR
CODE "or",2,0,ORR	            ; bitwise OR
    ppop0 H,L
    ld A,B
    or H
    ld B,A
    ld A,C
    or L
    ld C,A
    NEXT

; xor    x1 x2 -- x3            logical xor
CODE "xor",3,0,XORR	        ; bitwise xor
    ppop0 H,L
    ld A,B
    xor H
    ld B,A
    ld A,C
    xor L
    ld C,A
    NEXT

; +       n1/u1 n2/u2 -- n3/u3     add n1+n2
CODE "+",1,0,PLUS
    ppop0 H,L
    add HL,BC
    loadWord B,C, H,L
    NEXT

; INVERT x1 -- x2               ; bitwise complement
CODE "not",6,0,INVER
    ENTER
    DW  LIT, -1, XORR, EXIT

; negate  n1 -- n2                      negate n1
CODE "negate",6,0,NEGAT
    ENTER
    dw INVER,ONEP,EXIT

; negate  n1 -- n2                      negate n1
CODE "dnegate",7,0,DNEGA
    ENTER
	DW	INVER, TOR, INVER
	DW	LIT, 1, UPLUS
	DW	RFROM, PLUS, EXIT

CODE "-",1,0,SUBB
    ENTER
	DW	NEGAT,Plus,EXIT

; abs   n -- u                          absolute value
CODE "abs",3,0,ABS                   ; case sensitive for ABS label for some reason
    ENTER
    DW	DUPP, ZLESS, QBRAN, ABS1
    DW	NEGAT
ABS1:		
    DW	EXIT

; =      x1 x2 -- flag         test x1=x2
CODE "=",1,0,EQUAL
    ENTER
    DW      XORR
    DW      QBRAN,EQU1
    DW      LIT,0,EXIT            ;false flag
EQU1:           
    DW      LIT,-1,EXIT           ;true flag

;   U<          ( u u -- t )
;               Unsigned compare of top two items.
CODE "U<",2,0,ULESS	        ; less than
    ENTER
    DW      DDUP,XORR,ZLESS
    DW      QBRAN,ULES1
    DW      SWAP,DROP,ZLESS,EXIT
ULES1:          
    DW      SUBB,ZLESS,EXIT

;   <           ( n1 n2 -- t )
;               is less than
CODE "<",1,0,LESS	        ; less than
    ENTER
	DW	DDUP, XORR, ZLESS, QBRAN, LESS1
	DW	DROP, ZLESS, EXIT
LESS1:		
    DW	SUBB, ZLESS, EXIT

; >      n1 n2 -- flag          test n1 > n2
CODE ">",1,0,GREATERTHAN	        ; less than
    ppop0 H,L                  ; swap operands
    ppush H,L
    jr LESS

; max   n1 n2 -- u                      maximum
CODE "max",3,0,MAX
    ENTER
	DW	DDUP, LESS, QBRAN, MAX1
    DW	SWAP
MAX1:		
    DW	DROP,EXIT

; min   n1 n2 -- u                      minimum
CODE "min",3,0,MIN
    ENTER
    DW      DDUP,SWAP,LESS
    DW      QBRAN,MIN1
    DW      SWAP
MIN1:           
    DW      DROP,EXIT

;   WITHIN      ( u ul uh -- t )
;               Return true if u is within the range of ul and uh.
CODE 'WITHIN',6,0,WITHI
	ENTER
	DW	OVER,SUBB,TOR			;ul <= u < uh
	DW	SUBB,RFROM,ULESS,EXIT

;   UM+         ( w w -- w cy )
;               Add two numbers, return the sum and carry flag.
CODE "UM+",6,0,UPLUS
    ppop0 H,L
	ADD	HL,BC	        ;11t
    ppush0 H,L
	LD	BC,0	        ;10t
	JR	NC,UMP1         ;12/7t
UMP2:		
    INC	BC	            ; 6t
UMP1:		
    NEXT

;   UM/MOD      ( udl udh u -- ur uq )
;               Unsigned divide of a double by a single. Return mod and quotient.
CODE  'UM/MOD',6,0,UMMOD
    ENTER
    DW      DDUP,ULESS
    DW      QBRAN,UMM4
    DW      NEGAT,LIT,15,TOR
UMM1:           
    DW      TOR,DUPP,UPLUS
    DW      TOR,TOR,DUPP,UPLUS
    DW      RFROM,PLUS,DUPP
    DW      RFROM,RAT,SWAP,TOR
    DW      UPLUS,RFROM,ORR
    DW      QBRAN,UMM2
    DW      TOR,DROP,LIT,1,PLUS,RFROM
    DW      BRAN,UMM3
UMM2:           
    DW      DROP
UMM3:           
    DW      RFROM
    DW      DONXT,UMM1
    DW      DROP,SWAP,EXIT
UMM4:           
    DW      DROP,DDROP
    DW      LIT,-1,DUPP,EXIT      ;overflow, return max


; U/MOD   u1 u2 -- u1 u2    unsigned 16 / 16 -> r q
CODE "u/mod",5,0,USLASHMOD
    ppop D,E                ; DE = divisor
                            ; BC = dividend
    call divideWordByWord

    ppush0 H,L           ; PUSH remainder,
    NEXT

CODE "/mod",4,0,slashmod             ; dvend dvisr -- rem quot
    ENTER
    dw over, over                       ;       u1 u2 -- u1 u2 u1 u2  dupe both args
    dw XORR                              ; u1 u2 u1 u2 -- u1 u2 b1     xor hi bits
    dw ZLESS                         ; true if high bit still set
    dw nrot                             ;    u1 u2 b1 -- b1 u1 u2     move to bottom

    dw over                             ;    b1 u1 u2 -- b1 u1 u2 u1  dupe dividend
    dw ZLESS                         ; b1 u1 u2 u1 -- b1 u1 u2 b2  zero if signs are the same
    dw nrot                             ; b1 u1 u2 b2 -- b1 b2 u1 u2  move to bottom

    dw ABS, swap, ABS, swap             ; remove sign from both args
    dw uslashmod                        ; b1 b2 u1 u2 -- b1 b2 r q    unsigned divide (remainder, quotient)
    dw swap                             ; b1 b2 u1 u2 -- b1 b2 q r
    dw rot                              ; b1 b2 q r -- b1 q r b2      bring to top
    dw QBRAN,SLASHMOD1 
    dw NEGAT                       ;   b1 q r b2 -- b1 q -r      if -ve then negate answer
SLASHMOD1:
    dw nrot                             ;     b1 q -r -- -r b1 q     bring to top
    dw swap                             ;     -r b1 q -- -r q b1      bring to top
    dw QBRAN,SLASHMOD2
    dw NEGAT                       ;     -r q b1 -- -r -q       if signs differ then negate answer
SLASHMOD2:
    EXIT

CODE "mod",3,0,mod                   ; dvend dvisr -- remainder
    ENTER
    dw slashmod,DROP,EXIT                             ; drop quotient
    
CODE "/",1,0,slash                   ; dvend dvisr -- quot
    ENTER
    dw slashmod,swap, drop, EXIT        ; drop remainder


; U*   u1 u2 -- ud   unsigned mutliply
CODE "u*",2,0,USTAR              ; u1 u2 -- ud
                                    ; u2 in BC
    ppop0 D,E                       ; u1 in DE
	call unsignedMultiply
    ppush0 D,E                      ; udlo result
                                    ; udhi result
    NEXT

CODE "*",1,0,STAR                    ; u1 u2 -- ud
    ENTER
    dw over, over                       ; dupe both args
    dw ABS, swap, ABS                   ; remove sign from both args
    dw ustar, drop                      ; unsigned multiply, drop hi-word
    dw nrot                             ; move to bottom
    dw XORR                              ; zero if signs are the same
    dw ZLESS                         ; if high bit set
    dw QBRAN,STAR1
    dw NEGAT                       ; if signs differ then negate answer
STAR1:
    EXIT

; CELL+    c-addr1 -- c-addr2   add cell size to addr
CODE "cell+",5,0,CELLP
    jp TWOP

CODE "cell-",5,0,CELLM
    jp TWOM

; CELLS   ( n1 -- n2 ) n2 is the size in address units of n1 cells.
CODE "cells",5,0,CELLS
    jp TWOST

; 0= zero-equal
CODE "0=",2,0,ZEQUAL
    checkZeroWord B,C            ; returns 0 if not equal, 1 if equal
    _if nz
        ld BC, -1
    _endif
    inc BC
    NEXT

CODE "0<>",3,0,ZNEQU
    checkZeroWord B,C            ; returns 0 if not equal, 1 if equal
    _if nz
        ld BC, 1
    _endif
    NEXT

; 1+      n -- n                    add 1 to TOS
CODE "1+",2,0,ONEP
    inc BC
    NEXT

; 1-      n -- n            sub 1 to TOS
CODE "1-",2,0,ONEM
    dec BC
    NEXT

; 2+      n1/u1 -- n2/u2            add 2 to TOS
CODE "2+",2,0,TWOP
    inc BC
    inc BC
    NEXT

CODE "2-",2,0,TWOM
    dec BC
    dec BC
    NEXT

; 2*      n1/u1 -- n2/u2            arithmetic left shift
CODE "2*",2,0,TWOST
    sla C
    rl B
    NEXT

; 2/      x1 -- x2                  arithmetic right shift
CODE "2/",2,0,TWOSLASH
    sra B
    rr C
    NEXT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; negate ***
; params: HL = number
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

negateNum:
    ; Negate HL (using two's complement)
    xor A
    sub L
    ld L, A
    ld A, 0     ; Note that xor A or SUB A would disturb CF
    sbc A, H
    ld H, A
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; divide word by byte ***
; params: HL = dividend, C = divisor
; returns: HL = result, A = remainder
; destroys: ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

divideWordByByte:
    ld B, 16
    xor A
    _do
        add HL, HL
        rla
        _if c
            sub C
            inc L
        _else
            cp C
            _if nc
                sub C
                inc L
            _endif
        _endif
    _djnz
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Divide word by word ***
; params: BC = dividend, DE = divisor
; returns: BC = result, HL = remainder
; destroys: ?
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

divideWordByWord:
    push DE
    ld HL,0
    ld A,B
    ld B,8
    _do
        rla
        adc HL,HL
        sbc HL,DE
        _if c
            add HL,DE
        _endif
    _djnz
    rla
    cpl
    ld B,A
    ld A,C
    ld C,B
    ld B,8
    _do
        rla
        adc HL,HL
        sbc HL,DE
        _if c
            add HL,DE
        _endif
    _djnz
    rla
    cpl
    ld B,C
    ld C,A
    pop DE
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; unsignedMultiply -  unsigned multiply ***
;
; params:  u1 in BC, u2 in DE
; returns: result in HLDE
; destroys: AF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

unsignedMultiply:
    ld HL,0
    ld A,17     ; loop counter
    or A        ; clear carry
    _do
        rr H
        rr L
        rr D
        rr E
        _if c
            add HL,BC
        _endif
        dec A
    _until z
    _enddo
    ret
