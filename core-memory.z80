; !        x a-addr --   store cell in memory
CODE "!",1,0,STORE
    ppop H,L
    writeWord HL, B,C
    ppop0 B,C          ; POP new TOS
    NEXT

CODE "@",1,0,FETCH
    loadWord H,L, B,C ; HL = TOS
    readWord HL, B,C
    NEXT

; C!      char c-addr --    store char in memory
CODE "c!",2,0,CSTORE
    ppop H,L
    ld (HL),C
    ppop0 B,C          ; POP new TOS
    NEXT

; C@     c-addr -- char   fetch char from memory
CODE "c@",2,0,CFETCH
    ld A,(BC)
    ld C,A
    ld B,0
    NEXT

;z RSP!  a-addr --                  set return stack pointer
CODE "rsp!",4,0,RSPSTORE
    SET_RET_SP B,C
	ppop0 B,C                      ; POP TOS
    NEXT

CODE "sp@",3,0,SPFETCH
    push IX
    pop HL
    ppush H,L
    NEXT

CODE "sp!",3,0,SPSTORE
    ppop H,L
    push HL
    pop IX
    NEXT

; allocate n bytes of memory                                   ( n -- ) allocate n bytes of memory
CODE "allot",5,0,allot               ;
    ENTER
    ; dw here, addstore                   ; adds n to here
    dw here, PSTOR                   ; adds n to here
    EXIT

;   +!          ( n a -- )
;               Add n to the contents at address a.
CODE  '+!',2,0,PSTOR
    ENTER
    DW      SWAP,OVER,Fetch,PLUS
    DW      SWAP,STORE,EXIT

; CODE "+!",2,0,ADDSTORE               ; (n addr -- )
; 	ppop H, L		            ; HL = address, TOS = amount to add
; 	ld A,(HL)
; 	add A,C                         ; add TOS at (HL),
; 	ld (HL),A
; 	inc HL
; 	ld A,(HL)
; 	adc A,B
; 	ld (HL),A
; 	ppop0 B,C                      ; clear param stack
;     NEXT

CODE ",",1,0,COMMA
	ld HL, (VAR_HERE)	; HERE
	writeWord HL, B,C
	ld (VAR_HERE), HL	; Update HERE (incremented)
	ppop0 B,C		        ; cleanup TOS
    NEXT

CODE "c,",1,0,CCOMMA
    ppush0 H,L
	ld HL, (VAR_HERE)	; HERE
	ld (HL), C          ; Store DE at memory pointed to by VAR_HERE
	inc HL
	ld (VAR_HERE), HL	; Update HERE (incremented)
    ppop0 H,L
	ppop0 B,C		        ; cleanup TOS
    NEXT

;   R@          ( -- w )
;               Copy top of return stack to the data stack.
CODE	'R@',2,0,RAT
	PUSH	BC
	LD	C,(IX+0)
	LD	B,(IX+1)
	NEXT

