litStr:                                     ; pushes ptr to string and length on stack
    ENTER                                 ; enter forth
    dw rfrom
    dw count, over, over, plus
    dw tor
    EXIT

; count extract string length from pascal string  ( ptr -- ptr+1 len )
CODE "count",5,0,count
    ENTER
    dw DUPP, LIT, 1, plus                ; ( ptr -- ptr ptr+1)
    dw swap, CAT                     ; ( ptr ptr+1 -- ptr+1 len)
    EXIT

; using {"s",$22} because it's surprisingly difficult
; to define the name s" using asm80
CODE {"s",$22},2,IMMED,squote
    jr qt

CODE $22,1,IMMED,QT
    ENTER
    dw state, AT, zequal
    dw QBRAN,QT3
        dw LIT, $22                     ; delim
        dw LIT, 63                      ; limit 63 + length
        dw latestStr, AT
        dw LIT, wordBuf, equal
        dw QBRAN,QT1
            dw LIT, wordBuf2
            dw BRAN,QT2
QT1:    
            dw LIT, wordBuf
QT2:
        dw latestStr, STORE             ; STORE here in latestStr
        dw latestStr, AT
        dw xword, count
        dw BRAN,QT4
QT3:
        dw LIT, litstr, comma
        dw LIT, $22, word
        dw CAT, ONEP
        dw allot
QT4:
    EXIT



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; compareStr - string equal
; params: de = string1, HL = string2, BC = length
; returns: a = -1, 0, 1, HL = mismatch char if a != 0
; destroys: de, HL, BC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

compareStr:

    checkZeroWord B,C    ; test for Count=0
    _if nz          ; length zero = match
        _do
            ld A,(DE)
            inc DE
            cpi
            _if nz          ; char mismatch: exit
                dec HL      ; point at mismatch char
                cp (HL)     ; set carry if char1 < char2
                sbc A,A
                or 1        ; a = ff if carry, 1 if no carry
                ret
            _endif
        _until po
        _enddo
    _endif
    ; count exhausted & no mismatch found
    ld A,0          ; a=0 (s1=s2)
    ret

CODE "pack",4,0,pack             ; ( adr1 len adr2 -- adr2 )
    ppop D,E                        ; DE = adr2, BC = len
    push DE
    ppop0 H,L                       ; HL = adr1
    ld A,C
    ld (DE),A                       ; write length byte to adr2
    inc DE                          ; adr2 += 1
    ldir
    pop BC                          ; TOS = adr2
    NEXT

