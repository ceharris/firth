;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; words
;;
;; forth word defintions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

mCODE "quit",4,0,quit
    ENTER
    dw sp0, fetch, spStore
    dw interpret
    EXIT

mCODE "word",5,0,WORD                 ; delim -- c-addr
    ENTER
    dw lit, 64                          ; limit
    dw here, fetch
    dw xword                            ; writes to HERE!
    EXIT

mCODE ">cfa",4,0,tcfa
    ENTER
    dw lit, 2, plus
    dw count
    dw lit, msk_length, and
    dw plus
    EXIT

; count extract string length from pascal string  ( ptr -- ptr+1 len )
mCODE "count",5,0,count
    ENTER
    dw dup, lit, 1, plus                ; ( ptr -- ptr ptr+1)
    dw swap, cfetch                     ; ( ptr ptr+1 -- ptr+1 len)
    EXIT

; allocate n bytes of memory                                   ( n -- ) allocate n bytes of memory
mCODE "allot",5,0,allot               ;
    ENTER
    dw here, addstore                   ; adds n to here
    EXIT

mCODE "bl",2,0,bl
    ENTER
    dw lit, $20                         ; compile branch on zero
    EXIT

mCODE "interpret",6,0,interpret
    rst $08
    cDo
    	dw bl, word, count        ; pstr -- ptr len
        dw dup, zEqual
        cIf
            dw drop, drop                           ; ptr len --
            EXIT
        cEndif
        dw interpToken                       ; interpret the next word
    cEndDo
    EXIT

mCODE "'",1,0,tick                    ; quotes next word
    dw bl,word,find,zEqual
    dw rFrom,count,over,over,plus,toR
    dw EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; flow control
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; using {"s",$22} because it's surprisingly difficult
; to define the name s" using asm80
mCODE {"s",$22},2,msk_immed,squote
    jr qt

mCODE $22,1,msk_immed,qt
    ENTER
    dw state, fetch, zequal
    cIf
        dw lit, $22                     ; delim
        dw lit, 63                      ; limit 63 + length
        dw latestStr, fetch
        dw lit, wordBuf, equal
        cIf
            dw lit, wordBuf2
        cElse
            dw lit, wordBuf
        cEndIf
        dw latestStr, store             ; store here in latestStr
        dw latestStr, fetch
        dw xword, count
    cElse
        dw lit, litstr, comma
        dw lit, $22, word
        dw cfetch, oneplus
        dw allot
    cEndif
    EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; non-standard words
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

mCODE "{",1,msk_immed,lbrace
    ENTER
    dw state, fetch, zEqual
    dw nesting, fetch, zEqual
    dw and
    cIf
        dw here, fetch                  ; TOS = here
        dw lit, rst08_opcode, ccomma    ; write z80 jp opcode to word
    cEndIf
    dw nestPlus                         ; increase nesting
    EXIT                             ; return from the function.

mCODE "}",1,msk_immed,rbrace
    ENTER
    dw nestMinus                        ; reduce nesting
    dw state, fetch, zEqual
    dw nesting, fetch, zEqual
    dw and
    cIf
        dw lit, exit, comma                 ; append exit (so the word will return).
    cEndIf
    EXIT                             ; return from the function.

mCODE "}exec",5,msk_immed,rbraceExec
    ENTER
    dw rbrace
    dw state, fetch, zEqual
    dw nesting, fetch, zEqual
    dw and
    cIf
        dw dup
        dw here, store
        dw execute
    cEndIf
    EXIT                             ; return from the function.

