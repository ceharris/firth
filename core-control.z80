;   AHEAD       ( -- A )
;               Compile a forward branch instruction.
CODE  'AHEAD',5,IMMED,AHEAD
    DW      COMPI,BRAN,HERE,LIT,0,COMMA,EXIT

;   IFF          ( -- A )
;               Begin a conditional branch structure.
CODE  'IFF',3,IMMED,IFF
    ENTER
    DW      COMPI,QBRAN,HERE
    DW      LIT,0,COMMA,EXIT

;   THEN        ( A -- )
;               Terminate a conditional branch structure.
CODE  'THENN',5,IMMED,THENN
    ENTER
    DW      HERE,SWAP,STORE,EXIT

;   ELSE        ( A -- A )
;               Start the false clause in an IF-ELSE-THEN structure.
CODE  'ELSEE',5,IMMED,ELSEE
    ENTER
    DW      AHEAD,SWAP,THENN,EXIT



; ?branch   x --              branch if TOS zero
CODE "x?branch",7,0,XQBRAN
    checkZeroWord B,C               ; test old TOS
    ppop0 B,C                       ; POP new TOS
    jr z,XBRAN                     ; if old TOS=0, branch
    pop HL
    inc HL                          ; else skip inline value
    inc HL
    NEXT1

CODE "xbranch",6,0,XBRAN         ; relative branching
    pop HL                          ; add the offset to the instruction pointer
    ld E,(HL)
    inc HL
    ld D,(HL)
    dec HL
    add HL,DE
    NEXT1

CODE "if",2,IMMED,if
    ENTER
    dw lbrace
    dw LIT, XQBRAN, comma               ; compile ?branch
    dw here, AT, DUPP, comma            ; compile here and also push on stack
    EXIT

CODE "else",4,IMMED,else
    ENTER
    dw LIT, XBRAN, comma                ; definite branch to just over the false-part
    dw here, AT                         ; save here on stack
    dw LIT, 0, comma                    ; compile a dummy offset
    dw swap                             ; now back-fill the original (if) offset
    dw xendif                           ; must call xendif not endif
    EXIT

CODE "endif",5,IMMED,endif
    ENTER
    dw xendif                           ; must call xendif not endif
    dw rbraceExec
    EXIT

xendif:                                 ; must call xendif not endif
    ENTER
    dw DUPP
    dw here, AT, swap, SUBB         ; calculate the offset from the address saved on the stack
    dw swap, STORE                      ; STORE the offset in the back-filled location
    EXIT

; begin condition while ... repeat

CODE "begin",5,IMMED,begin
    ENTER
    dw lbrace
    dw here, AT                      ; save here on stack (here1)
    EXIT

CODE "while",5,IMMED,while
    ENTER
    dw LIT, XQBRAN, comma              ; compile branch on zero
    dw here, AT                      ; save here in stack (here2)
    dw LIT, 0, comma                    ; compile dummy offset
    EXIT

CODE "repeat",6,IMMED,repeat
    ENTER
    dw LIT, XBRAN, comma               ; compile branch
    dw swap                             ; tos = here1
    dw here, AT, SUBB, comma        ; compile offset (here1 - here3)
    dw DUPP
    dw here, AT, swap, SUBB         ; compile offset (here2 - here3)
    dw swap, STORE                      ; save offset in here2
    dw rbraceExec
    EXIT

; ?branch   x --              branch if TOS zero
CODE "?branch",7,0,QBRAN
    checkZeroWord B,C               ; test old TOS
    ppop0 B,C                       ; POP new TOS
    jr z,BRAN                     ; if old TOS=0, branch
    pop HL
    inc HL                          ; else skip inline value
    inc HL
    NEXT1

CODE "branch",6,0,BRAN         ; relative branching
    pop HL                          ; add the offset to the instruction pointer
    ld E,(HL)
    inc HL
    ld D,(HL)
    EX DE,HL
    NEXT1

;   next        ( -- )
;               Run time code for the single index loop.
;               : next ( -- ) \ hilevel model
;                 r> r> dup if 1 - >r @ >r exit then drop cell+ >r ;
CODE   'next',4,0,DONXT
    PUSH IX
    POP HL                              ; load rp into HL
    LD  A, (HL)                         ; a = low byte of r@
    OR  A        
    JR  NZ, DECLOW                      ; low > 0 goto dec low
    INC HL                              
    LD  A, (HL)                         ; a = high byte of r@
    OR  A        
    JR  NZ, DECHILO                     ; high > 0 goto dec hi dec lo
    INC HL                              
    PUSH HL                             
    POP IX                              ; pop r@
    INC DE                              ; IP = skip following word 
    INC DE       
    NEXT                               ; continue
DECHILO:
    DEC (HL)                            ; dec high byte of r@
    DEC HL       
DECLOW:
    DEC (HL)                            ; dec low byte of r@
    LD  L, E                            ; DE points to location of loop address
    LD  H, D                                
    LD  E, (HL)                         ; DE points to loop address    
    INC HL       
    LD  D, (HL)  
    NEXT                               ; continue to loop address


