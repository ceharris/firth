CODE "quit",4,0,quit
    ENTER
    dw sp0, AT, spStore
    dw interpret
    EXIT

CODE "word",5,0,WORD                 ; delim -- c-addr
    ENTER
    dw lit, 64                          ; limit
    dw here, AT
    dw xword                            ; writes to HERE!
    EXIT

CODE ">cfa",4,0,tcfa
    ENTER
    dw lit, 2, plus
    dw count
    dw lit, LENMASK, ANDD
    dw plus
    EXIT

CODE "execute",7,0,EXECUTE
    ppop H,L                        ; POP TOS into HL
    jp (hl)                         ; go do Forth word

CODE "interpret",6,0,INTERPRET
    ENTER
INTERPRET1:
	dw bl, word, count        ; pstr -- ptr len
    dw DUPP, zEqual
    dw QBRAN,INTERPRET2
        dw drop, drop                           ; ptr len --
        EXIT
INTERPRET2:
    dw interpToken                       ; interpret the next word
    dw BRAN,INTERPRET1  
    EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; lookup - lookup header in dictionary ***
;
; params: HL = string address, BC = string length
; returns: DE = found header ptr or 0
; destroys: AF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

lookup:
    ld DE, (VAR_LATEST)             ; search dictionary backwards from LATEST
    _do
        checkZeroWord D,E            ; NULL pointer?  (end of the linked list)
        ret z

        ; Compare the length expected and the length of the word.
        ; Note that if the HIDE flag is set on the word, then by a bit of trickery
        ; this won't pick the word (the length will appear to be wrong).

        push DE                     ; save ptr to header

        inc DE                      ; skip over first field
        inc DE
        ld A, (DE)                    ; a = flags+length field
        and HIDE | LENMASK    ; %al = name length

        cp C                        ; Length is the same?
        _if z
                                    ; Compare the strings in detail.
            inc DE                  ; DE = Dictionary string we are checking against.

            push HL                 ; save HL, BC
            push BC
            call compareStr           ; Compare the strings. BC = len
            pop BC
            pop HL

            or A                    ; if A == 0 then matched
            _if z
                pop DE                  ; matched, restore DE and return
                ret
            _endif

        _endif
        pop DE                  ; restore DE
        ld A,(DE)
        ex AF,AF'
        inc DE
        ld A,(DE)
        ld D,A
        ex AF,AF'
        ld E,A
    _enddo

CODE "xword",6,0,xword               ; delim limit addr -- c-addr
    call xwordSkip
    call xwordRead
    NEXT

xwordSkip:                              ; delim addr -- delim addr char
    ppop H,L
    ppop D,E
    ppush0 B,C
    ppush0 D,E
    ppush0 H,L
    _do
        call getKey                     ; get next key, returned in A

        _switch

            bit 7, A                    ; check end of input
            _if nz
                ld (HL),0
                ld A,0
                _break
            _endif

            cp $5C                      ; \ start of a comment?
            _case z                     ; if yes skip to end of line
                _do
                    call getKey
                    cp "\r"             ; end of line yet?
                    _if nz
                        cp "\n"         ; end of line yet?
                    _endif
                _until z
                _enddo
            _endcase

            cp C                        ; = space?
            _case z
            _endcase

            cp " "                      ; < space?
            _case c
            _endcase

            ; default case
            _break

        _endswitch
    _enddo
    ld B,0
    ld C,A
    ret

xwordRead:                              ; delim addr char -- c-addr
    ld A,C
    ppop0 B,C
    ppop H,L
    ppop D,E
    ld D,0
    or A
    _if nz
        push HL                         ; save a copy of HL
        inc HL                          ; move to leave space for length byte
        ld B,E
        _do
            ld (HL), A                  ; add character to return lineBuf
            inc HL
            inc D
            call getKey                 ; get next key
            cp C                        ; = delim?
        _until z
            cp " "                      ; < space? i.e. control chars
        _until c
        _djnz
        pop HL                          ; restore HL
    _endif
    ld (HL),D                           ; write length
    loadWord B,C, H,L                   ; TOS = str ptr
    ret

interpToken:                                ; ptr len --
    rst $08
    dw over, over, find                     ; ptr len -- ptr len addr
    dw DUPP, ZNEQU
    dw QBRAN, interpToken1
        dw interpWord
        dw BRAN, interpToken2
interpToken1:
        dw interpLiteral
interpToken2:
    EXIT

interpWord:                                 ; ptr len addr --
    rst $08                                 ; enter forth
    dw swap, drop, swap, drop               ; ptr len addr -- addr
    dw DUPP, lit, 2, plus, CAT            ; ( headptr -- headptr flags ) add 2 to headptr
    dw lit, IMMED, ANDD                  ; ( headptr flags -- headptr immedflag )
    dw zEqual
    dw QBRAN,interpWord2
        dw tcfa                             ; ( headptr -- xt )
        dw state, AT
        dw nesting, AT
        dw ORR
        dw QBRAN,interpWord1
            dw comma                        ; compile xt
            dw BRAN,interpWord3
interpWord1:
            dw execute                      ; execute xt
            dw BRAN,interpWord3
interpWord2:
        dw tcfa, execute                    ; execute xt
interpWord3:
    EXIT

interpLiteral:                              ; ptr len addr --
    rst $08                                 ; enter forth
    dw drop                                 ; ptr len addr - ptr len
    dw number, zEqual                       ; parse to number
    dw QBRAN,interpLiteral1
        dw state, AT
        dw nesting, AT
        dw ORR
        dw QBRAN,interpLiteral2
            dw lit, lit                     ; (val -- val "lit" )
            dw comma, comma                 ; compile "lit" val
            dw BRAN,interpLiteral2
interpLiteral1:
        dw drop                             ; ( ptr len zero -- ptr len ), not found
        dw litstr                           ; err != 0, parse error
        .pstr "Error: parsing"
        dw type
interpLiteral2:
    EXIT

nestPlus:
	ld HL, (VAR_NESTING)
    INC HL
	ld (VAR_NESTING), HL
    NEXT

nestMinus:
	ld HL, (VAR_NESTING)
    DEC HL
	ld (VAR_NESTING), HL
    NEXT
