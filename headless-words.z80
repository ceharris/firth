;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; headless words
;;
;; forth words not in dictionary
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

exit:
    pop HL
    jp (IY)

exit_forth:
    ret

litStr:                                     ; pushes ptr to string and length on stack
    rst $08                                 ; enter forth
    dw rfrom
    dw count, over, over, plus
    dw tor
    EXIT

interpToken:                                ; ptr len --
    rst $08
    dw over, over, find                     ; ptr len -- ptr len addr
    dw dup, zNotEqual
    cIf
        dw interpWord
    cElse
        dw interpLiteral
    cEndif
    EXIT

interpWord:                                 ; ptr len addr --
    rst $08                                 ; enter forth
    dw swap, drop, swap, drop               ; ptr len addr -- addr
    dw dup, lit, 2, plus, cfetch            ; ( headptr -- headptr flags ) add 2 to headptr
    dw lit, msk_immed, and                  ; ( headptr flags -- headptr immedflag )
    dw zEqual
    cif
        dw tcfa                             ; ( headptr -- xt )
        dw state, fetch
        dw nesting, fetch
        dw or
        cif
            dw comma                        ; compile xt
        cElse
            dw execute                      ; execute xt
        cendif
    cElse
        dw tcfa, execute                    ; execute xt
    cendif
    EXIT

interpLiteral:                              ; ptr len addr --
    rst $08                                 ; enter forth
    dw drop                                 ; ptr len addr - ptr len
    dw number, zEqual                       ; parse to number
    cif
        dw state, fetch
        dw nesting, fetch
        dw or
        cIf
            dw lit, lit                     ; (val -- val "lit" )
            dw comma, comma                 ; compile "lit" val
        cEndIf
    cElse
        dw drop                             ; ( ptr len zero -- ptr len ), not found
        dw litstr                           ; err != 0, parse error
        .pstr "Error: parsing"
        dw type
    cEndIf
    EXIT

nestPlus:
	ld HL, (VAR_NESTING)
    INC HL
	ld (VAR_NESTING), HL
    NEXT

nestMinus:
	ld HL, (VAR_NESTING)
    DEC HL
	ld (VAR_NESTING), HL
    NEXT

dodoes:             ; -- a-addr
    ppush0 B,C
    pop HL          ; parameter field address
    pop BC
    push HL
    NEXT

xdoes:                                  ; --
    rst $08                             ; enter forth
    dw rfrom
    dw latest, fetch, tcfa
    dw lit, call_opcode
    dw over, cstore
    dw oneplus, store
    EXIT


