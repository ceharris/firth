mCODE ":",1,0,colon
    ENTER
    dw create                           ; create the dictionary entry / header
    dw here,fetch                       ; back up 3 bytes to start of data area
    dw lit, 3, SUBB
    dw here, store
    dw lit, rst08_opcode, ccomma        ; write z80 jp opcode to word
    dw latest, fetch, hidden            ; make the word hidden (see below for definition).
    dw rbrac                            ; go into compile mode.
    EXIT                                ; return from the function.

mCODE ";",1,msk_immed,semicolon
    ENTER
    dw lit, exit, comma                 ; append exit (so the word will return).
    dw latest, fetch, hidden            ; toggle hidden flag -- unhide the word (see below for definition).
    dw lbrac                            ; go back to immediate mode.
    EXIT                                ; return from the function.

mCODE ":noname",7,0,colonNoName
    ENTER
    dw here, fetch                      ; TOS = here
    dw lit, rst08_opcode, ccomma        ; write z80 jp opcode to word
    dw rbrac                            ; go into compile mode.
    EXIT                                ; return from the function.

mCODE "variable",8,0,variable         ; ( n -- ) get name from input
    ENTER
    dw lit, 1, cells
    dw here, fetch, swap                ; n -- here n
    dw allot                            ; allocate n bytes, push addr
    dw constant
    EXIT

mCODE "buffer:",7,0,bufferColon       ; ( n -- ) get name from input
    ENTER
    dw here, fetch, swap                ; n -- here n
    dw allot                           ; allocate n bytes, push addr
    dw constant
    EXIT

mCODE "create",6,0,create             ; --
    ENTER
    dw here, fetch                      ; get old "here"
    dw latest, fetch, comma             ; write link to previous word to "here"
    dw latest, store                    ; update latest to old "here"
    dw bl, word                   ; read word token
    dw cfetch, ONEP, allot           ;
    dw lit, jp_opcode, cComma           ; compile default behavious
    dw lit, xcreate, comma              ; i.e. push addr of data area
    EXIT                                ; exit from forth
xcreate:
    ENTER
    dw rfrom                            ; push onto stack
    EXIT

mCODE "does>", 5, msk_immed, does         ; --
    ENTER
    dw lit, xdoes, comma
    dw lit, dodoes
    dw here, fetch
    dw lit, call_opcode
    dw over, cstore
    dw ONEP, store
    dw lit, 3, allot
    EXIT

mCODE "constant",8,0,constant         ; --
    ENTER
    dw create,comma,xdoes
    rst $08
    dw rfrom                            ; push onto stack
    dw fetch
    EXIT

mCODE "'",1,0,tick                    ; quotes next word
    ENTER
    dw bl,word,find,zEqual
    dw rFrom,count,over,over,plus,toR
    EXIT

mCODE "immediate",9,MSK_IMMED,IMMEDIATE
    ld HL, (VAR_LATEST)                 ; get head of latest word
    inc HL                              ; point to flags byte
    inc HL
    ld a, MSK_IMMED
    xor (HL)                            ; toggle the IMMED bit.
    ld (HL),a
    NEXT

mCODE "find",4,0,FIND
    ppop0 H,L

    call lookup                     ; params: HL = string address, BC = string length
                                    ; returns: DE = found header ptr or 0
    loadWord B,C, D,E               ; move to TOS
    NEXT

mCODE "hidden",6,0,HIDDEN
    ppop H,L		            ; HL = Dictionary entry.
    inc HL
    inc HL                      ; Point to name/flags byte.

    ld A, (HL)
    xor MSK_HIDDEN        	    ; Toggle the HIDDEN bit.
    ld (HL), A
    NEXT

mCODE "[",1,MSK_IMMED,LBRAC
	ld HL, 0
	ld (VAR_STATE), HL	; Set STATE to 0.
    NEXT

mCODE "]",1,0,RBRAC
	ld HL, 1
	ld (VAR_STATE), HL	; Set STATE to 1.
    NEXT

dodoes:             ; -- a-addr
    ppush0 B,C
    pop HL          ; parameter field address
    pop BC
    push HL
    NEXT

xdoes:                                  ; --
    ENTER
    dw rfrom
    dw latest, fetch, tcfa
    dw lit, call_opcode
    dw over, cstore
    dw ONEP, store
    EXIT

mCODE "postpone",8,msk_immed,postpone ; --
    rst $08
	dw bl, word, count            ; pstr -- ptr len
    dw DUPP, zEqual
    cIf
        dw drop, drop                   ; ptr len --
    cElse
        dw postponeToken                ; interpret the next word
    cEndif
    EXIT

postponeToken:                          ; --
    rst $08
    dw over, over, find                 ; ptr len -- ptr len addr
    dw DUPP, zNotEqual
    cIf
        dw postponeWord
    cElse
        dw postponeLiteral
    cEndif
    EXIT

postponeWord:                               ; ( headptr -- )
    rst $08                                 ; enter forth
    dw swap, drop, swap, drop               ; ptr len addr -- addr
    dw DUPP, lit, 2, plus, cfetch            ; ( headptr -- headptr flags ) add 2 to headptr
    dw lit, msk_immed, ANDD                  ; ( headptr flags -- headptr immedflag )
    dw zEqual
    cIf
        dw lit, lit, comma
        dw tcfa, comma
        dw lit, comma, comma
    cElse
        dw tcfa, comma
    cEndIf
    EXIT

postponeLiteral:                            ; ( ptr len -- )
    rst $08                                 ; enter forth
    dw drop                                 ; ptr len addr - ptr len
    dw number, zEqual                       ; parse to number
    cif
        dw lit, lit                     ; (val -- val "lit" )
        dw comma, comma                 ; compile "lit" val
    cElse
        dw drop                             ; ( ptr len zero -- ptr len ), not found
        dw litstr                           ; err != 0, parse error
        .pstr "Error: parsing"
        dw type
    cEndIf
    EXIT



    
