CODE 'PRN',3,0,PRN
    ENTER
    DW COMPI,DOT,EXIT                   ;test only

;   COMPILE     ( -- )
;               Compile the next address in colon list to code dictionary.
CODE 'COMPILE',7,0,COMPI
    ENTER
    DW RFROM,DUPP,AT,COMMA     ;compile address
    DW CELLP,TOR,EXIT          ;adjust return address

CODE ":",1,0,colon
    ENTER
    dw create                           ; create the dictionary entry / header
    dw here,AT                       ; back up 3 bytes to start of data area
    dw LIT, 3, SUBB
    dw here, STORE
    dw LIT, rst08_opcode, ccomma        ; write z80 jp opcode to word
    dw latest, AT, hidden            ; make the word hidden (see below for definition).
    dw rbrac                            ; go into compile mode.
    EXIT                                ; return from the function.

CODE ";",1,IMMED,semicolon
    ENTER
    dw LIT, exit, comma                 ; append exit (so the word will return).
    dw latest, AT, hidden            ; toggle hidden flag -- unhide the word (see below for definition).
    dw lbrac                            ; go back to immediate mode.
    EXIT                                ; return from the function.

CODE ":noname",7,0,colonNoName
    ENTER
    dw here, AT                      ; TOS = here
    dw LIT, rst08_opcode, ccomma        ; write z80 jp opcode to word
    dw rbrac                            ; go into compile mode.
    EXIT                                ; return from the function.

CODE "variable",8,0,variable         ; ( n -- ) get name from input
    ENTER
    dw LIT, 1, cells
    dw here, AT, swap                ; n -- here n
    dw allot                            ; allocate n bytes, push addr
    dw constant
    EXIT

CODE "buffer:",7,0,bufferColon       ; ( n -- ) get name from input
    ENTER
    dw here, AT, swap                ; n -- here n
    dw allot                           ; allocate n bytes, push addr
    dw constant
    EXIT

CODE "create",6,0,create             ; --
    ENTER
    dw here, AT                      ; get old "here"
    dw latest, AT, comma             ; write link to previous word to "here"
    dw latest, STORE                    ; update latest to old "here"
    dw bl, word                   ; read word token
    dw CAT, ONEP, allot           ;
    dw LIT, jp_opcode, cComma           ; compile default behavious
    dw LIT, xcreate, comma              ; i.e. push addr of data area
    EXIT                                ; exit from forth
xcreate:
    ENTER
    dw rfrom                            ; push onto stack
    EXIT

CODE "does>", 5, IMMED, does         ; --
    ENTER
    dw LIT, xdoes, comma
    dw LIT, dodoes
    dw here, AT
    dw LIT, call_opcode
    dw over, cstore
    dw ONEP, STORE
    dw LIT, 3, allot
    EXIT

CODE "constant",8,0,constant         ; --
    ENTER
    dw create,comma,xdoes
    ENTER
    dw rfrom                            ; push onto stack
    dw AT
    EXIT

CODE "immediate",9,IMMED,IMMEDIATE
    ld HL, (VAR_LATEST)                 ; get head of latest word
    inc HL                              ; point to flags byte
    inc HL
    ld a, IMMED
    xor (HL)                            ; toggle the IMMED bit.
    ld (HL),a
    NEXT

CODE "hidden",6,0,HIDDEN
    ppop H,L		            ; HL = Dictionary entry.
    inc HL
    inc HL                      ; Point to name/flags byte.

    ld A, (HL)
    xor HIDE        	    ; Toggle the HIDDEN bit.
    ld (HL), A
    NEXT

CODE "[",1,IMMED,LBRAC
	ld HL, 0
	ld (VAR_STATE), HL	; Set STATE to 0.
    NEXT

CODE "]",1,0,RBRAC
	ld HL, 1
	ld (VAR_STATE), HL	; Set STATE to 1.
    NEXT

dodoes:             ; -- a-addr
    PDUP
    pop HL          ; parameter field address
    pop BC
    push HL
    NEXT

xdoes:                                  ; --
    ENTER
    dw rfrom
    dw latest, AT, tcfa
    dw LIT, call_opcode
    dw over, cstore
    dw ONEP, STORE
    EXIT

CODE "postpone",8,IMMED,postpone ; --
    ENTER
	dw bl, word, count            ; pstr -- ptr len
    dw DUPP, zEqual
    dw QBRAN,postpone1
        dw drop, drop                   ; ptr len --
        dw BRAN,postpone2
postpone1:
        dw postponeToken                ; interpret the next word
postpone2:    
    EXIT

postponeToken:                          ; --
    ENTER
    dw over, over, find                 ; ptr len -- ptr len addr
    dw DUPP, ZNEQU
    dw QBRAN,postponeToken1
        dw postponeWord
        dw BRAN,postponeToken2
postponeToken1:
        dw postponeLiteral
postponeToken2:
    EXIT

postponeWord:                               ; ( headptr -- )
    ENTER                                 ; enter forth
    dw swap, drop, swap, drop               ; ptr len addr -- addr
    dw DUPP, LIT, 2, plus, CAT            ; ( headptr -- headptr flags ) add 2 to headptr
    dw LIT, IMMED, ANDD                  ; ( headptr flags -- headptr immedflag )
    dw zEqual
    dw QBRAN,postponeWord1
        dw LIT, LIT, comma
        dw tcfa, comma
        dw LIT, comma, comma
        dw BRAN,postponeWord2
postponeWord1:
        dw tcfa, comma
postponeWord2:
    EXIT

postponeLiteral:                            ; ( ptr len -- )
    ENTER                                 ; enter forth
    dw drop                                 ; ptr len addr - ptr len
    dw number, zEqual                       ; parse to number
    dw QBRAN, postponeLiteral1
        dw LIT, LIT                     ; (val -- val "LIT" )
        dw comma, comma                 ; compile "LIT" val
        dw BRAN, postponeLiteral2
postponeLiteral1:
        dw drop                             ; ( ptr len zero -- ptr len ), not found
        dw litstr                           ; err != 0, parse error
        .pstr "Error: parsing"
        dw type
postponeLiteral2:
    EXIT



    
