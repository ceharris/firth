; ; words must preserve: BC, DE, SP, IX
; ; words may destroy: HL, IY, AF, AF', BC', DE' HL'


; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; ;;
; ;; memory access
; ;;
; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; stack
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; output
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


    
    ; dw dup, 0<                      ; ptr data data 
    ; cIf                             
    ;     dw swap                     ; data ptr 
    ;     dw dup, lit, '-'            ; data ptr ptr '-'
    ;     dw swap, store              ; data ptr
    ; cEndif
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HL = data, DE = ptr to lineBuf, C = base ***
; DE = ptr to string, BC = length
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; formatNumber:                       ; base data ptr -- ptr length
    ; bit 7, H
    ; _if nz
    ;     ; HL is negative. Output '-' to string and negate HL.
    ;     ld A, '-'
    ;     ld (DE), A
    ;     inc DE
    ;     call negateNum
    ; _endif

    ; ld B, 0     ; B will count character length of number
    ; _do
    ;     push BC
    ;     call divideWordByByte  ; HL = HL / A, A = remainder
    ;     pop BC
    ;     push AF
    ;     inc B
    ;     checkZeroWord H,L
    ; _until z
    ; _enddo
    ; _do
    ;     pop AF
    ;     add A,$30                     ; convert digit to ASCII
    ;     cp $3A
    ;     _if nc
    ;         add A,7
    ;     _endif
    ;     ld (DE), A
    ;     inc DE
    ; _djnz

    ; ld HL,wordBuf           ;calc length
    ; ex DE,HL
    ; or A
    ; sbc HL,DE
    ; loadWord B,C, H,L
    ; ret


